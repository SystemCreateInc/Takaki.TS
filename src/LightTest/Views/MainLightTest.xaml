<UserControl x:Class="LightTest.Views.MainLightTest"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:prism="http://prismlibrary.com/"
             prism:ViewModelLocator.AutoWireViewModel="True"
             xmlns:controls="clr-namespace:WindowLib.Views;assembly=WindowLib"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:converter="clr-namespace:LightTest.Converter"   
             xmlns:b="clr-namespace:WindowLib.Behaviors;assembly=WindowLib"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors">

    <UserControl.Resources>
        <Style x:Key="DataGridColumnAlignRight" TargetType="TextBlock" BasedOn="{x:Static DataGridTextColumn.DefaultElementStyle}">
            <Setter Property="HorizontalAlignment" Value="Right"/>
        </Style>

        <Style x:Key="ToggleButtonRed" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="border" Padding="5,5,5,5" CornerRadius="5,5,5,5" Background="#FFBFACAC" BorderBrush="#FF000000" BorderThickness="1,1,1,1" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Background" TargetName="border" Value="Red"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ToggleButtonYellow" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="border" Padding="5,5,5,5" CornerRadius="5,5,5,5" Background="#FFBFACAC" BorderBrush="#FF000000" BorderThickness="1,1,1,1" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Background" TargetName="border" Value="Yellow"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ToggleButtonGreen" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="border" Padding="5,5,5,5" CornerRadius="5,5,5,5" Background="#FFBFACAC" BorderBrush="#FF000000" BorderThickness="1,1,1,1" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#FF008040"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ToggleButtonWhite" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="border" Padding="5,5,5,5" CornerRadius="5,5,5,5" Background="#FFBFACAC" BorderBrush="#FF000000" BorderThickness="1,1,1,1" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Background" TargetName="border" Value="White"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ToggleButtonBlue" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="border" Padding="5,5,5,5" CornerRadius="5,5,5,5" Background="#FFBFACAC" BorderBrush="#FF000000" BorderThickness="1,1,1,1" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#FF0080FF"/>
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



    </UserControl.Resources>


    <DockPanel>
        <DockPanel.Resources>
            <converter:StatusVisibleConvert x:Key="VisibleConvert"/>
        </DockPanel.Resources>
        
        <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" Margin="1">
            <ToolBarTray DockPanel.Dock="Top">
                <ToolBar ClipToBounds="False" Padding="0">
                    <ToolBar.Resources>
                        <Style TargetType="Button">
                            <Setter Property="Focusable" Value="False"/>
                            <Setter Property="Margin" Value="1"/>
                        </Style>
                        <Style TargetType="materialDesign:PackIcon">
                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                            <Setter Property="Margin" Value="1"/>
                            <Setter Property="Height" Value="32"/>
                            <Setter Property="Width" Value="32"/>
                        </Style>
                        <Style TargetType="TextBlock">
                            <Setter Property="VerticalAlignment" Value="Center"/>
                        </Style>
                    </ToolBar.Resources>

                    <Button Command="{Binding LightOn}" Padding="5" ToolTip="表示器を点灯します">
                        <StackPanel Orientation="Vertical">
                            <materialDesign:PackIcon Kind="Lightbulb" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <TextBlock Text="点灯"/>
                        </StackPanel>
                    </Button>
                    <Separator/>
                    <Button Command="{Binding LightOff}" Padding="5"  ToolTip="表示器を消灯します">
                        <StackPanel Orientation="Vertical">
                            <materialDesign:PackIcon Kind="LightbulbOff" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <TextBlock Text="消灯"/>
                        </StackPanel>
                    </Button>
                    <Separator/>
                    <StackPanel Width="20">
                    </StackPanel>
                    <Separator/>
                    <Button Command="{Binding Select}" Padding="5"  ToolTip="表示器の選択/解除をします">
                        <StackPanel Orientation="Vertical">
                            <materialDesign:PackIcon Kind="SelectAll" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <TextBlock Text="選択/解除"/>
                        </StackPanel>
                    </Button>
                    <Separator/>
                    <StackPanel Width="20">
                    </StackPanel>
                    <Separator/>
                    <Button Command="{Binding SelAll}" Padding="5"  ToolTip="表示器を全選択します">
                        <StackPanel Orientation="Vertical">
                            <materialDesign:PackIcon Kind="SelectionRemove" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <TextBlock Text="全選択"/>
                        </StackPanel>
                    </Button>
                    <Separator/>
                    <Button Command="{Binding DeSelAll}" Padding="5"  ToolTip="表示器を全解除します">
                        <StackPanel Orientation="Vertical">
                            <materialDesign:PackIcon Kind="SelectOff" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <TextBlock Text="全解除"/>
                        </StackPanel>
                    </Button>
                    <Separator/>
                    <StackPanel Width="20">
                    </StackPanel>
                    <Separator/>
                    <Button Command="{Binding Settings}" Padding="5"  ToolTip="表示器の表示内容を設定します">
                        <StackPanel Orientation="Vertical">
                            <materialDesign:PackIcon Kind="Settings" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <TextBlock Text="内容"/>
                        </StackPanel>
                    </Button>
                    <Separator/>
                    <StackPanel Width="20">
                    </StackPanel>
                    <Separator/>
                    <Button Command="{Binding Exit}" Padding="5"  ToolTip="終了します">
                        <StackPanel Orientation="Vertical">
                            <materialDesign:PackIcon Kind="ExitToApp" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <TextBlock Text="終了"/>
                        </StackPanel>
                    </Button>
                    <Separator/>
                </ToolBar>
            </ToolBarTray>
        </StackPanel>

        <DockPanel DockPanel.Dock="Top">

        </DockPanel>

        <Grid DockPanel.Dock="Top">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="2*" MinHeight="150"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="1*" MinHeight="60"/>
            </Grid.RowDefinitions>

            <DockPanel Grid.Row="0" Grid.Column="0">
                <Label Content="表示器一覧" DockPanel.Dock="Top"/>
                <controls:GridColumnSetting TargetGrid="{Binding ElementName=tdunitdatagrid}" SettingsKey="GridLightTestTdUnitColumns"/>
                <DataGrid Margin="3" DockPanel.Dock="Left" 
                        Name="tdunitdatagrid" ItemsSource="{Binding DisplayAddrs, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"                          
                        CanUserSortColumns="False"
                        CanUserReorderColumns="False"
                        AutoGenerateColumns="False"
                        VerticalScrollBarVisibility="Auto"
                        HorizontalScrollBarVisibility="Auto"
                        RowHeaderWidth="0" CanUserAddRows="False"
                        CanUserResizeRows="False" FrozenColumnCount="0"
                        SelectionMode="Extended"
                        Background="White" IsReadOnly="False">

                    <DataGrid.Columns>
                        <DataGridTemplateColumn Header="選択" Width="Auto" SortMemberPath="Logic" IsReadOnly="True">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <CheckBox IsChecked="{Binding Select, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTextColumn Header="表示器CD" Width="Auto" Binding="{Binding TdUnitAddrCode}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="ポートCD" Width="Auto" Binding="{Binding TdUnitPortCode}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="ポート番号" Width="Auto" Binding="{Binding TdPortCom}"  ElementStyle="{StaticResource RightTextElement}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="グループ" Width="Auto" Binding="{Binding TddGroup}"  ElementStyle="{StaticResource RightTextElement}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="アドレス" Width="Auto" Binding="{Binding TddAddr}"  ElementStyle="{StaticResource RightTextElement}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="ボタン数" Width="Auto" Binding="{Binding TddButton}"  ElementStyle="{StaticResource RightTextElement}" IsReadOnly="True"/>

                    </DataGrid.Columns>
                    <i:Interaction.Behaviors>
                        <b:DataGridSelectedItemsBlendBehavior SelectedItems="{Binding SelectedItems}" />
                    </i:Interaction.Behaviors>
                </DataGrid>
            </DockPanel>
            <DockPanel Grid.Row="0" Grid.Column="1">
                <Label Content="表示器異常一覧" DockPanel.Dock="Top"/>
                <controls:GridColumnSetting TargetGrid="{Binding ElementName=datagriderr}" SettingsKey="GridLightTestTdUnitErrColumns"/>
                <DataGrid  Margin="3" DockPanel.Dock="Top"
                        Name="datagriderr" ItemsSource="{Binding DisplayErrs, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"                        
                        AutoGenerateColumns="False"
                        VerticalScrollBarVisibility="Auto"
                        HorizontalScrollBarVisibility="Auto"
                        RowHeaderWidth="0"
                        CanUserResizeRows="False" FrozenColumnCount="0"
                        Background="White" IsReadOnly="True">

                    <DataGrid.ItemContainerStyle>
                        <Style TargetType="DataGridRow">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding LightTestErrStatusName}" Value="異常">
                                    <Setter Property="Background" Value="Red" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding LightTestErrStatusName}" Value="MID">
                                    <Setter Property="Background" Value="Yellow"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding LightTestErrStatusName}" Value="LOW">
                                    <Setter Property="Background" Value="Orange"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.ItemContainerStyle>

                    <DataGrid.Columns>
                        <DataGridTextColumn Header="表示器CD" Width="Auto" Binding="{Binding TdUnitAddrCode}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="グループ" Width="Auto" Binding="{Binding TddGroup}"  ElementStyle="{StaticResource RightTextElement}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="アドレス" Width="Auto" Binding="{Binding TddAddr}"  ElementStyle="{StaticResource RightTextElement}" IsReadOnly="True"/>
                        <DataGridTextColumn Header="状態" Width="Auto" Binding="{Binding LightTestErrStatusName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True"/>
                    </DataGrid.Columns>
                </DataGrid>
            </DockPanel>


            <GridSplitter Grid.Row="1" Grid.ColumnSpan="1" Height="5" Background="MediumAquamarine"/>
            <DockPanel Grid.Row="2"  Grid.ColumnSpan="1">
                <Label  Grid.Row="2" Content="表示器通信ログ" DockPanel.Dock="Top"/>

                <ListBox x:Name="DisplayListBox" Grid.Row="2"  Grid.ColumnSpan="2" Margin="3" BorderBrush="Black" BorderThickness="1"
                 ItemsSource="{Binding DisplayLogs,  Mode=OneWay, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}" TargetUpdated="DisplayLog_TargetUpdated"
                 DisplayMemberPath="LogText" >

                    <ListBox.Resources>
                        <Style TargetType="ListBox">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding LogColor}" Value="R">
                                    <Setter Property="Foreground" Value="Blue"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding LogColor}" Value="E">
                                    <Setter Property="Foreground" Value="Red"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding LogColor}" Value="T">
                                    <Setter Property="Foreground" Value="LightGreen"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ListBox.Resources>
                </ListBox>
            </DockPanel>

            <DockPanel Grid.Row="2"  Grid.Column="2">
                <Label  Grid.Row="2" Content="表示ポート状態" DockPanel.Dock="Top"/>
                <controls:GridColumnSetting TargetGrid="{Binding ElementName=portdatagrid}" SettingsKey="GridLightPortColumns"/>
                <DataGrid Margin="3" DockPanel.Dock="Top" HorizontalAlignment="Left"
                        Name="portdatagrid" ItemsSource="{Binding TdPorts, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"                        
                        AutoGenerateColumns="False"
                        VerticalScrollBarVisibility="Auto"
                        HorizontalScrollBarVisibility="Auto"
                        RowHeaderWidth="0"
                        CanUserResizeRows="False" FrozenColumnCount="0"
                        Background="White" IsReadOnly="True">

                <DataGrid.Columns>
                    <DataGridTextColumn Header="ポートCD" Width="Auto" Binding="{Binding TdUnitPortCode}"/>
                    <DataGridTextColumn Header="ポート名" Width="Auto" Binding="{Binding TdPortCom}"/>
                    <DataGridTextColumn Header="ポート区分名" Width="Auto" Binding="{Binding TdUnitPortTypeName}"/>
                    <DataGridTextColumn Header="状態" Width="auto" Binding="{Binding PortStatusName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                </DataGrid.Columns>
            </DataGrid>
            </DockPanel>
        </Grid>

    </DockPanel>


</UserControl>
